  public function testValidRequiredEmailFalse() {
    //email未入力のバリテーションがちゃんと走るかのテスト
    validRequired('test@exsample.com', 'email');
    $results = getErrMsg('email');
    $this->assertNull($results);
  }

  public function testValidRequiredPasswordFalse() {
    //password未入力のバリテーションがちゃんと走るかのテスト
    validRequired('123456', 'pass');
    $results = getErrMsg('pass');
    $this->assertNull($results);
  }

  public function testValidRequiredPasswordReFalse() {
    //password未入力のバリテーションがちゃんと走るかのテスト
    validRequired('123456', 'password_re');
    $results = getErrMsg('password_re');
    $this->assertNull($results);
  }

  public function testValidFormatEmailFalse() {
    //emailの形式のバリテーションがちゃんと走るかのテスト
    validEmail('test@exsample.com', 'email');
    $results = getErrMsg('email');
    $this->assertNull($results);
  }

  public function testValidMaxLenEmailFalse() {
    //emailの最大文字数のバリテーションがちゃんと走るかのテスト
    validMaxLen('test@exsample.com', 'email');
    $results = getErrMsg('email');
    $this->assertNull($results);
  }

  public function testValidDuplicateEmailFalse() {
    //emailの最大文字数のバリテーションがちゃんと走るかのテスト
    validEmailDup('test@exsample.com', 'email');
    $results = getErrMsg('email');
    $this->assertNull($results);
  }

  public function testValidHalfPasswordFalse() {
    //passwordが半角文字数かどうかのバリテーションがちゃんと走るかのテスト
    validHalf('123456', 'pass');
    $results = getErrMsg('pass');
    $this->assertNull($results);
  }

  public function testValidMaxLenPasswordFalse() {
    //passwordの最大文字数のバリテーションがちゃんと走るかのテスト
    validMaxLen('123456', 'pass');
    $results = getErrMsg('pass');
    $this->assertNull($results);
  }

  public function testValidMinLenPasswordFalse() {
    //passwordの最小文字数のバリテーションがちゃんと走るかのテスト
    validMinLen('123456', 'pass');
    $results = getErrMsg('pass');
    $this->assertNull($results);
  }

  public function testValidMaxLenPasswordReFalse() {
    //password(再入力)の最大文字数のバリテーションがちゃんと走るかのテスト
    validMaxLen('123456', 'password_re');
    $results = getErrMsg('password_re');
    $this->assertNull($results);
  }

  public function testValidMinLenPasswordReFalse() {
    //password(再入力)の最小文字数のバリテーションがちゃんと走るかのテスト
    validMinLen('123456', 'password_re');
    $results = getErrMsg('password_re');
    $this->assertNull($results);
  }

  public function testValidMatchPasswordFalse() {
    //passwordとpassword(再入力)の内容が合致しているかのテスト
    validMatch('123456','123456', 'password_re');
    $results = getErrMsg('password_re');
    $this->assertNull($results);
  }